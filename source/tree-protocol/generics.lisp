(cl:in-package #:cl-grf.tree-protocol)


(defgeneric treep (node))
(defgeneric leafp (node))
(defgeneric maximal-depth (training-parameters))
(defgeneric (setf maximal-depth) (new-value training-parameters))
(defgeneric depth (state))
(defgeneric (setf depth) (new-value state))
(defgeneric training-parameters (state))
(defgeneric (setf training-parameters) (new-value state))
(defgeneric leaf-class (training-parameters))
(defgeneric (setf leaf-class) (new-value state))
(defgeneric make-node (node-class &rest arguments))
(defgeneric split-with-mode (mode training-state leaf))
(defgeneric needs-split-p-with-mode (mode training-state leaf))
(defgeneric trials-count (training-parameters))
(defgeneric (setf trials-count) (new-value training-parameters))
(defgeneric force-tree* (tree))
(defgeneric left-node (tree))
(defgeneric (setf left-node) (new-value tree))
(defgeneric right-node (tree))
(defgeneric (setf right-node) (new-value tree))
(defgeneric trees-count (training-parameters))
(defgeneric (setf trees-count) (new-value training-parameters))
(defgeneric feature (node))
(defgeneric (setf feature) (new-value node))
(defgeneric split-mode (training-state))
(defgeneric needs-split-p-mode (training-state))
(defgeneric (setf split-mode) (new-value training-state))
(defgeneric (setf needs-split-p-mode) (new-value training-state))
